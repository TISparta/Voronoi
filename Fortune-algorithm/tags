!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28bc/
Arguments	header/Arguments.hpp	/^struct Arguments {$/;"	s
CIRCLE_EVENT	header/Event.hpp	/^    CIRCLE_EVENT$/;"	e	enum:Event::Type
Event	header/Event.hpp	/^class Event {$/;"	c
FORCE	Makefile	/^FORCE: ;$/;"	t
FortuneAlgorithm	header/FortuneAlgorithm.hpp	/^class FortuneAlgorithm {$/;"	c
FortuneAlgorithm	src/FortuneAlgorithm.cpp	/^FortuneAlgorithm::FortuneAlgorithm (const std::vector <Point>& sites)$/;"	f	class:FortuneAlgorithm
HEGIHT	header/Arguments.hpp	/^const int HEGIHT = 600;$/;"	v	typeref:typename:const int
HalfEdge	header/HalfEdge.hpp	/^class HalfEdge {$/;"	c
MAX_VAL	header/Arguments.hpp	/^const int MAX_VAL =  1000;$/;"	v	typeref:typename:const int
MIN_VAL	header/Arguments.hpp	/^const int MIN_VAL = -1000;$/;"	v	typeref:typename:const int
N_POINTS	header/Arguments.hpp	/^const int N_POINTS = 10;$/;"	v	typeref:typename:const int
OUTPUT_FILE_NAME	header/Arguments.hpp	/^const std::string OUTPUT_FILE_NAME = "diagram";$/;"	v	typeref:typename:const std::string
Point	header/Point.hpp	/^  Point () {}$/;"	f	struct:Point
Point	header/Point.hpp	/^  Point (T x, T y): x(x), y(y) {}$/;"	f	struct:Point
Point	header/Point.hpp	/^struct Point {$/;"	s
References	README.md	/^# References$/;"	c
SITE_EVENT	header/Event.hpp	/^    SITE_EVENT,$/;"	e	enum:Event::Type
Site	header/Site.hpp	/^class Site {$/;"	c
T	header/Point.hpp	/^using T = float;$/;"	t	typeref:typename:float
Type	header/Event.hpp	/^  enum class Type {$/;"	g	class:Event
Voronoi	header/Voronoi.hpp	/^struct Voronoi {$/;"	s
WIDTH	header/Arguments.hpp	/^const int WIDTH = 800;$/;"	v	typeref:typename:const int
clean	Makefile	/^clean:$/;"	t
compute_bounds	src/FortuneAlgorithm.cpp	/^void FortuneAlgorithm::compute_bounds (const std::vector <Point>& sites)$/;"	f	class:FortuneAlgorithm	typeref:typename:void
compute_diagram	src/FortuneAlgorithm.cpp	/^void FortuneAlgorithm::compute_diagram (const std::vector <Point>& sites)$/;"	f	class:FortuneAlgorithm	typeref:typename:void
diagram	header/FortuneAlgorithm.hpp	/^  Voronoi diagram;$/;"	m	class:FortuneAlgorithm	typeref:typename:Voronoi
from	header/HalfEdge.hpp	/^  Point* from = nullptr;$/;"	m	class:HalfEdge	typeref:typename:Point *
generate_random_sites	header/util.hpp	/^void generate_random_sites (int n_sites, int min_val, int max_val,$/;"	f	namespace:util	typeref:typename:void
getDiagram	header/FortuneAlgorithm.hpp	/^  inline Voronoi getDiagram () const { return diagram; }$/;"	f	class:FortuneAlgorithm	typeref:typename:Voronoi
height	header/Arguments.hpp	/^  int height = HEGIHT;$/;"	m	struct:Arguments	typeref:typename:int
init_site_events	src/FortuneAlgorithm.cpp	/^void FortuneAlgorithm::init_site_events (const std::vector <Point>& sites)$/;"	f	class:FortuneAlgorithm	typeref:typename:void
main	src/main.cpp	/^int main (int argc, char** argv) {$/;"	f	typeref:typename:int
max_val	header/Arguments.hpp	/^  int max_val = MAX_VAL;$/;"	m	struct:Arguments	typeref:typename:int
max_x	header/Voronoi.hpp	/^  int max_x;$/;"	m	struct:Voronoi	typeref:typename:int
max_y	header/Voronoi.hpp	/^  int max_y;$/;"	m	struct:Voronoi	typeref:typename:int
min_val	header/Arguments.hpp	/^  int min_val = MIN_VAL;$/;"	m	struct:Arguments	typeref:typename:int
min_x	header/Voronoi.hpp	/^  int min_x;$/;"	m	struct:Voronoi	typeref:typename:int
min_y	header/Voronoi.hpp	/^  int min_y;$/;"	m	struct:Voronoi	typeref:typename:int
n_points	header/Arguments.hpp	/^  int n_points = N_POINTS;$/;"	m	struct:Arguments	typeref:typename:int
next	header/HalfEdge.hpp	/^  HalfEdge* next = nullptr;$/;"	m	class:HalfEdge	typeref:typename:HalfEdge *
operator <	header/Event.hpp	/^  bool operator < (const Event& other)$/;"	f	class:Event	typeref:typename:bool
operator <	header/Point.hpp	/^  bool operator < (const Point& other) const$/;"	f	struct:Point	typeref:typename:bool
operator ==	header/Point.hpp	/^  bool operator == (const Point& other) const$/;"	f	struct:Point	typeref:typename:bool
output_file_name	header/Arguments.hpp	/^  std::string output_file_name = OUTPUT_FILE_NAME;$/;"	m	struct:Arguments	typeref:typename:std::string
p	header/Event.hpp	/^  Point p;$/;"	m	class:Event	typeref:typename:Point
parse_arguments	header/util.hpp	/^static void parse_arguments (int argc, char** argv, Arguments& arg)$/;"	f	namespace:util	typeref:typename:void
pq	header/FortuneAlgorithm.hpp	/^  std::priority_queue <Event> pq;$/;"	m	class:FortuneAlgorithm	typeref:typename:std::priority_queue<Event>
prev	header/HalfEdge.hpp	/^  HalfEdge* prev = nullptr;$/;"	m	class:HalfEdge	typeref:typename:HalfEdge *
random_point	header/util.hpp	/^static Point random_point (int l, int r) {$/;"	f	namespace:util	typeref:typename:Point
random_real	header/util.hpp	/^static T random_real (int l, int r)$/;"	f	namespace:util	typeref:typename:T
show_help	header/util.hpp	/^void show_help ()$/;"	f	namespace:util	typeref:typename:void
sites	header/Arguments.hpp	/^  std::vector <Point> sites; $/;"	m	struct:Arguments	typeref:typename:std::vector<Point>
sites	header/Voronoi.hpp	/^  std::vector <Site> sites;$/;"	m	struct:Voronoi	typeref:typename:std::vector<Site>
to	header/HalfEdge.hpp	/^  Point* to = nullptr;$/;"	m	class:HalfEdge	typeref:typename:Point *
util	header/util.hpp	/^namespace util {$/;"	n
valid	header/Event.hpp	/^  bool valid;$/;"	m	class:Event	typeref:typename:bool
verify	header/Arguments.hpp	/^  void verify () {$/;"	f	struct:Arguments	typeref:typename:void
voronoi	Makefile	/^voronoi: FORCE$/;"	t
width	header/Arguments.hpp	/^  int width = WIDTH;$/;"	m	struct:Arguments	typeref:typename:int
x	header/Point.hpp	/^  T x;$/;"	m	struct:Point	typeref:typename:T
y	header/Point.hpp	/^  T y;$/;"	m	struct:Point	typeref:typename:T
